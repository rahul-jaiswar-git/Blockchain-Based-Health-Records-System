{"ast":null,"code":"import { ethers } from 'ethers';\nimport HealthcareRecordsArtifact from '../artifacts/contracts/HealthcareRecords.sol/HealthcareRecords.json';\n\n// Update with your deployed contract address\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nconsole.log(\"Using hardcoded contract address:\", contractAddress);\nexport const connectWallet = async () => {\n  if (!window.ethereum) {\n    alert('Please install MetaMask to use this application');\n    return null;\n  }\n  try {\n    // Request account access\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n\n    // Create a provider\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // Get the signer\n    const signer = provider.getSigner();\n\n    // Create a contract instance\n    const contract = new ethers.Contract(contractAddress, HealthcareRecordsArtifact.abi, signer);\n\n    // Register as doctor if not already registered\n    try {\n      const isDoctor = await contract.isDoctor(accounts[0]);\n      if (!isDoctor) {\n        const tx = await contract.registerDoctor(accounts[0]);\n        await tx.wait();\n      }\n    } catch (error) {\n      console.error('Error registering doctor:', error);\n    }\n    return {\n      address: accounts[0],\n      provider,\n      signer,\n      contract\n    };\n  } catch (error) {\n    console.error('Error connecting to wallet:', error);\n    throw error;\n  }\n};\nexport const checkIfDoctor = async (contract, address) => {\n  try {\n    return await contract.isDoctor(address);\n  } catch (error) {\n    console.error('Error checking if doctor:', error);\n    return false;\n  }\n};\nexport const addPatient = async (contract, patientId, name, age, disease) => {\n  try {\n    const tx = await contract.addPatient(patientId, name, age, disease);\n    await tx.wait();\n    return tx.hash;\n  } catch (error) {\n    console.error('Error adding patient:', error);\n    throw error;\n  }\n};\nexport const updatePatient = async (contract, patientId, disease) => {\n  try {\n    const tx = await contract.updatePatient(patientId, disease);\n    await tx.wait();\n    return tx.hash;\n  } catch (error) {\n    console.error('Error updating patient:', error);\n    throw error;\n  }\n};\nexport const getPatient = async (contract, patientId) => {\n  try {\n    const patient = await contract.getPatient(patientId);\n    return {\n      name: patient.name,\n      age: patient.age.toString(),\n      disease: patient.disease,\n      doctorAssigned: patient.doctorAssigned\n    };\n  } catch (error) {\n    console.error('Error getting patient:', error);\n    throw error;\n  }\n};\nexport const authorizeDoctor = async (contract, patientId, doctorAddress) => {\n  try {\n    const tx = await contract.authorizeDoctor(patientId, doctorAddress);\n    await tx.wait();\n    return tx.hash;\n  } catch (error) {\n    console.error('Error authorizing doctor:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["ethers","HealthcareRecordsArtifact","contractAddress","console","log","connectWallet","window","ethereum","alert","accounts","request","method","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","isDoctor","tx","registerDoctor","wait","error","address","checkIfDoctor","addPatient","patientId","name","age","disease","hash","updatePatient","getPatient","patient","toString","doctorAssigned","authorizeDoctor","doctorAddress"],"sources":["C:/Users/rahul/Desktop/New bl medi/frontend/src/utils/blockchain.js"],"sourcesContent":["import { ethers } from 'ethers';\r\nimport HealthcareRecordsArtifact from '../artifacts/contracts/HealthcareRecords.sol/HealthcareRecords.json';\r\n\r\n// Update with your deployed contract address\r\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\r\n\r\nconsole.log(\"Using hardcoded contract address:\", contractAddress);\r\n\r\nexport const connectWallet = async () => {\r\n  if (!window.ethereum) {\r\n    alert('Please install MetaMask to use this application');\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    // Request account access\r\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    \r\n    // Create a provider\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    \r\n    // Get the signer\r\n    const signer = provider.getSigner();\r\n    \r\n    // Create a contract instance\r\n    const contract = new ethers.Contract(\r\n      contractAddress,\r\n      HealthcareRecordsArtifact.abi,\r\n      signer\r\n    );\r\n\r\n    // Register as doctor if not already registered\r\n    try {\r\n      const isDoctor = await contract.isDoctor(accounts[0]);\r\n      if (!isDoctor) {\r\n        const tx = await contract.registerDoctor(accounts[0]);\r\n        await tx.wait();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error registering doctor:', error);\r\n    }\r\n    \r\n    return { \r\n      address: accounts[0], \r\n      provider, \r\n      signer, \r\n      contract \r\n    };\r\n  } catch (error) {\r\n    console.error('Error connecting to wallet:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const checkIfDoctor = async (contract, address) => {\r\n  try {\r\n    return await contract.isDoctor(address);\r\n  } catch (error) {\r\n    console.error('Error checking if doctor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const addPatient = async (contract, patientId, name, age, disease) => {\r\n  try {\r\n    const tx = await contract.addPatient(patientId, name, age, disease);\r\n    await tx.wait();\r\n    return tx.hash;\r\n  } catch (error) {\r\n    console.error('Error adding patient:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updatePatient = async (contract, patientId, disease) => {\r\n  try {\r\n    const tx = await contract.updatePatient(patientId, disease);\r\n    await tx.wait();\r\n    return tx.hash;\r\n  } catch (error) {\r\n    console.error('Error updating patient:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getPatient = async (contract, patientId) => {\r\n  try {\r\n    const patient = await contract.getPatient(patientId);\r\n    return {\r\n      name: patient.name,\r\n      age: patient.age.toString(),\r\n      disease: patient.disease,\r\n      doctorAssigned: patient.doctorAssigned\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting patient:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const authorizeDoctor = async (contract, patientId, doctorAddress) => {\r\n  try {\r\n    const tx = await contract.authorizeDoctor(patientId, doctorAddress);\r\n    await tx.wait();\r\n    return tx.hash;\r\n  } catch (error) {\r\n    console.error('Error authorizing doctor:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}