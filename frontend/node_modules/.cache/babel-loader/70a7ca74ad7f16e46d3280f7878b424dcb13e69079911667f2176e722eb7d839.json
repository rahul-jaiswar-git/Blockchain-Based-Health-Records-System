{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahul\\\\Desktop\\\\New bl medi\\\\frontend\\\\src\\\\components\\\\LoginScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Card, Button, Alert, Row, Col } from 'react-bootstrap';\nimport { connectWallet, checkIfDoctor } from '../utils/blockchain';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginScreen = ({\n  onLogin\n}) => {\n  _s();\n  const [connecting, setConnecting] = useState(false);\n  const [error, setError] = useState('');\n  const [selectedRole, setSelectedRole] = useState(null);\n  const handleConnect = async role => {\n    setConnecting(true);\n    setError('');\n    setSelectedRole(role);\n    try {\n      const walletData = await connectWallet();\n      if (!walletData) {\n        setError('Failed to connect wallet. Please try again.');\n        setConnecting(false);\n        return;\n      }\n\n      // If doctor role selected, verify if they're registered\n      let isDoctor = false;\n      if (role === 'doctor') {\n        try {\n          isDoctor = await checkIfDoctor(walletData.contract, walletData.address);\n          if (!isDoctor) {\n            // For demo purposes, register as doctor if not already\n            const tx = await walletData.contract.registerDoctor(walletData.address);\n            await tx.wait();\n            isDoctor = true;\n          }\n        } catch (err) {\n          console.warn(\"Error checking doctor status:\", err);\n          // For demo, assume they are a doctor if they selected that role\n          isDoctor = true;\n        }\n      }\n      onLogin({\n        ...walletData,\n        isDoctor: role === 'doctor'\n      });\n    } catch (err) {\n      console.error('Login error:', err);\n      setError(`Failed to connect: ${err.message}`);\n    } finally {\n      setConnecting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center mb-4\",\n      children: \"Healthcare Blockchain System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            className: \"text-center p-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Doctor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Access patient records, add new patients, update medical information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              size: \"lg\",\n              onClick: () => handleConnect('doctor'),\n              disabled: connecting,\n              children: connecting && selectedRole === 'doctor' ? 'Connecting...' : 'Login as Doctor'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            className: \"text-center p-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Patient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"View your medical records and history\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"success\",\n              size: \"lg\",\n              onClick: () => handleConnect('patient'),\n              disabled: connecting,\n              children: connecting && selectedRole === 'patient' ? 'Connecting...' : 'Login as Patient'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginScreen, \"rpnj/42MTLC/+fvThnCenFiw0qs=\");\n_c = LoginScreen;\nexport default LoginScreen;\nvar _c;\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"names":["React","useState","Container","Card","Button","Alert","Row","Col","connectWallet","checkIfDoctor","jsxDEV","_jsxDEV","LoginScreen","onLogin","_s","connecting","setConnecting","error","setError","selectedRole","setSelectedRole","handleConnect","role","walletData","isDoctor","contract","address","tx","registerDoctor","wait","err","console","warn","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","md","Body","size","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/rahul/Desktop/New bl medi/frontend/src/components/LoginScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Card, Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { connectWallet, checkIfDoctor } from '../utils/blockchain';\r\n\r\nconst LoginScreen = ({ onLogin }) => {\r\n  const [connecting, setConnecting] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [selectedRole, setSelectedRole] = useState(null);\r\n\r\n  const handleConnect = async (role) => {\r\n    setConnecting(true);\r\n    setError('');\r\n    setSelectedRole(role);\r\n    \r\n    try {\r\n      const walletData = await connectWallet();\r\n      \r\n      if (!walletData) {\r\n        setError('Failed to connect wallet. Please try again.');\r\n        setConnecting(false);\r\n        return;\r\n      }\r\n      \r\n      // If doctor role selected, verify if they're registered\r\n      let isDoctor = false;\r\n      if (role === 'doctor') {\r\n        try {\r\n          isDoctor = await checkIfDoctor(walletData.contract, walletData.address);\r\n          \r\n          if (!isDoctor) {\r\n            // For demo purposes, register as doctor if not already\r\n            const tx = await walletData.contract.registerDoctor(walletData.address);\r\n            await tx.wait();\r\n            isDoctor = true;\r\n          }\r\n        } catch (err) {\r\n          console.warn(\"Error checking doctor status:\", err);\r\n          // For demo, assume they are a doctor if they selected that role\r\n          isDoctor = true;\r\n        }\r\n      }\r\n      \r\n      onLogin({\r\n        ...walletData,\r\n        isDoctor: role === 'doctor'\r\n      });\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      setError(`Failed to connect: ${err.message}`);\r\n    } finally {\r\n      setConnecting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <h1 className=\"text-center mb-4\">Healthcare Blockchain System</h1>\r\n      \r\n      {error && <Alert variant=\"danger\">{error}</Alert>}\r\n      \r\n      <Row className=\"justify-content-center mt-5\">\r\n        <Col md={5}>\r\n          <Card className=\"mb-4\">\r\n            <Card.Body className=\"text-center p-5\">\r\n              <h3>Doctor</h3>\r\n              <p>Access patient records, add new patients, update medical information</p>\r\n              <Button \r\n                variant=\"primary\" \r\n                size=\"lg\" \r\n                onClick={() => handleConnect('doctor')}\r\n                disabled={connecting}\r\n              >\r\n                {connecting && selectedRole === 'doctor' ? 'Connecting...' : 'Login as Doctor'}\r\n              </Button>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n        <Col md={5}>\r\n          <Card className=\"mb-4\">\r\n            <Card.Body className=\"text-center p-5\">\r\n              <h3>Patient</h3>\r\n              <p>View your medical records and history</p>\r\n              <Button \r\n                variant=\"success\" \r\n                size=\"lg\" \r\n                onClick={() => handleConnect('patient')}\r\n                disabled={connecting}\r\n              >\r\n                {connecting && selectedRole === 'patient' ? 'Connecting...' : 'Login as Patient'}\r\n              </Button>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}